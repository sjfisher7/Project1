The main purpose of this network is to expose a load balanced and monitored instance of DVWA server(D*mn Vunlerable Web Application). Load balancing makes sure that the application will have continuous access and be readily avaliable. Some additional security was added by deploying a Jump Box instead of accessing everything from a straight internet connection, you will have certain IP addresses that can access the jump box which increases security to the system. By integration of the ELK Server we can more easily monitor the vulnerable VM's for changes in metrics and system log files. The following is a table of the configuration:


Name  |IP Address | Operating System
| Jump Box| 10.0.0.4 | Linux
| Web 1| 10.0.0.5|Linux
| Web 2 | 10.0.0.6  |Linux
| Web 3 | 10.0.0.7 |Linux
| ELK-1 | 10.1.0.4 |Linux


The first step is to start out by setting up an account through Microsoft Azure. Once that is complete you will first have to set up Virtual Network and a Security group. Within the VNet there will be An Ansible Jump Box, 3 Docker containers, and an Elk Stack VM set to run filebeat and microbeat which will send information to Kibana.

This is an Ansible Playbook in YAML. I used it to download and launch a Docker web container and configure it with my Azure Jump Box VM.

    ---
    
    - name: Config Web VM with Docker
    
    hosts: webservers
    
    become: true
    
    tasks:
    
    - name: docker.io
    
    apt:
    
    update_cache: yes
    
    name: docker.io
    
    state: present
    
    - name: Install pip3
    
    apt:
    
    name: python3-pip
    
    state: present
    
    - name: Install Docker python module
    
    pip:
    
    name: docker
    
    state: present
    
    - name: download and launch a docker web container
    
    docker_container:
    
    name: dvwa
    
    image: cyberxsecurity/dvwa
    
    state: started
    
    restart_policy: always
    
    published_ports: 80:80
    
    - name: Enable docker service
    
    systemd:
    
    name: docker
    
    enabled: yes

Once you have a Jump Box VM with Ansible you can create machines such as Web-1 through Web-3. These containers do not have a public IP address, only a private IP. These 3 Web Containers are running the DVWA servers. 

The only way to access the 3 Containers is from the Jump Box VM by using SSH Keys. Only the Jump Box can accept conections from the Internet and was in this instance only able to be accessed by 1 IP address.  This makes them very secure, the security is stronger then if they had a public IP Address.

After the container has been made you can take the private IP address and add it to the /etc/ansible/host file. You also must make sure your Ansible Config file in /etc/ansible/ansible.cfg has been updated.

You only need to update the configuration file one time. Everytime you create a Web VM you will have to update the host file. You should be able to SSH from the Jump Box into the WebVM's. If you can do this then the configuration should be correct. The following is steps to make sure it gets set up:

Remember: Allowing a server to use password authentication for SSH is insecure because the password can be brute forced. Therefore, we will only use cryptographic SSH keys to access our cloud servers. Password authentication will not be allowed. This is part of the "ground up" security approach that we have been discussing.

1. Connect to your Ansible container. Once you're connected, create a new SSH key and copy the public key.

- Run `docker images` to view your image.

- Run `docker run -it cyberxsecurity/ansible /bin/bash` to start your container and connect to it. (Note that the prompt changes.)

    ```
    bash
    
    root@Red-Team-Web-VM-1:/home/RedAdmin# docker run -it cyberxsecurity/ansible /bin/bash
    
    root@23b86e1d62ad:~#
    
    ```

Run `ssh-keygen` to create an SSH key.
   - Run `ls .ssh/` to view your keys.
   - Run `cat .ssh/id_rsa.pub` to display your public key.
  - Copy your public key string. 
  -  Return to the Azure portal and locate one of your web-vm's details page.
  - Reset your Vm's password and use your container's new public key for the SSH user.
  - Get the internal IP for your new VM from the Details page.
  - After your VM launches, test your connection using `ssh` from your jump box Ansible container.
  - Locate the Ansible config file and hosts file.
  - Add this machine's internal IP address to the Ansible hosts file.
- Open the file with `nano /etc/ansible/hosts`.
- Uncomment the `[webservers]` header line.
- Add the internal IP address under the `[webservers]` header.
- Add the python line: `ansible_python_interpreter=/usr/bin/python3` besides each IP.

 Ex 2: A collection of hosts belonging to the 'webservers' group

> 
    > [webservers]
    > 
    > alpha.example.org
    > 
    > beta.example.org
    > 
    > ~~
    > 
    > 192.168.1.100 
    > 
    > 192.168.1.110
    > 
    > ~~
    > 
    > 10.0.0.6 ansible_python_interpreter=/usr/bin/python3
    > 
    > 10.0.0.7 ansible_python_interpreter=/usr/bin/python3
    > 

 

- Change the Ansible configuration file to use your administrator account for SSH connections.     
- Open the file with `nano/etc/ansible/ansible.cfg` and scroll down to the `remote_user` option.
-  Uncomment the `remote_user` line and replace `root` with your admin  username using this format:    
    `remote_user = <user-name-for-web-VMs>`
- default user to use for playbooks if user is not specified (/usr/bin/ansible will use current user as default).

    remote_user = sysadmin

Test an Ansible connection using the appropriate Ansible command. If you used `ansible_python_interpreter=/usr/bin/python3` your output should look like:

    ```
    bash
    
    10.0.0.5 | SUCCESS => {
    
    "changed": false,
    
    "ping": "pong"
    
    }
    
    10.0.0.6 | SUCCESS => {
    
    "changed": false,
    
    "ping": "pong".


After this has been tested you can move forward with creating the VM for the Elk Stack. I will also run Ansible playbooks for the filebeat and the microbeat to be created.

**The install-elk playbook**

  ---
>         - name: Configure Elk VM with Docker
>         
>         hosts: elkservers
>         
>         remote_user: elk
>         
>         become: true
>         
>         tasks:
>         
>         # Use apt module
>         
>         - name: Install docker.io
>         
>         apt:
>         
>         update_cache: yes
>         
>         force_apt_get: yes
>         
>         name: docker.io
>         
>         state: present
>         
>         # Use apt module
>         
>         - name: Install python3-pip
>         
>         apt:
>         
>         force_apt_get: yes
>         
>         name: python3-pip
>         
>         state: present
>         
>         # Use pip module (It will default to pip3)
>         
>         - name: Install Docker module
>         
>         pip:
>         
>         name: docker
>         
>         state: present
>         
>         # Use command module
>         
>         - name: Increase virtual memory
>         
>         command: sysctl -w vm.max_map_count=262144
>         
>         # Use sysctl module
>         
>         - name: Use more memory
>         
>         sysctl:
>         
>         name: sysctl
>         
>         value: "1"
>         
>         state: present
>         
>         reload: yes
>         
>         # Use docker_container module
>         
>         - name: download and launch a docker elk container
>         
>         docker_container:
>         
>         name: elk
>         
>         image: sebp/elk:761
>         
>         state: started
>         
>         restart_policy: always
>         
>         # Please list the ports that ELK runs on
>         
>         published_ports:
>         
>         - 5601:5601
>         
>         - 9200:9200
>         
>         - 5044:5044

After the Elk VM gets set up you can run the filebeat playbook and also modify the /etc/ansible/host file. You have to modify the host file so that only certain playbooks will run when you set up separate hosts. This way it will only attach to the Elk VM and not to the Webservers or Jump Box VM. The following is the playbook for Filebeat
>

   

  ---
>     
>     - name: installing and launching filebeat
>     
>     hosts: webservers
>     
>     become: yes
>     
>     tasks:
>     
>     - name: download filebeat deb
>     
>     command: curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.6.1-amd64.deb
>     
>     sudo dpkg -i filebeat-7.6.1-amd64.deb
>     
>     - name: install filebeat deb
>     
>     command: dpkg -i filebeat-7.6.1-amd64.deb
>     
>     - name: drop in filebeat.yml
>     
>     copy:
>     
>     src: /etc/ansible/files/filebeat-config.yml
>     
>     dest: /etc/filebeat/filebeat.yml
>     
>     - name: enable and configure system module
>     
>     command: filebeat modules enable system
>     
>     - name: setup filebeat
>     
>     command: filebeat setup
>     
>     - name: start filebeat service
>     
>     command: filebeat -e

   

 Once Filebeat and Microbeat have been installed information should be showing up on the Kibana Dashboard. You will use the Elk VM public IP address to access the Kibana App.
    Example would be 

    > <ElkPublicIP>:5601/app/kibana

 This will allow you to bring up the dashboad using the 5601 port. The 5601 port is a tcp/udp port that allows real time information to come through.

## A diagram of this is avaliable within the project.



